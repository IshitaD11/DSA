/* 1095. Find in Mountain Array

(This problem is an interactive problem.)

You may recall that an array arr is a mountain array if and only if:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array mountainArr, return the minimum index such that mountainArr.get(index) == target. If such an index does not exist, return -1.

You cannot access the mountain array directly. You may only access the array using a MountainArray interface:

MountainArray.get(k) returns the element of the array at index k (0-indexed).
MountainArray.length() returns the length of the array.
Submissions making more than 100 calls to MountainArray.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.

 

Example 1:

Input: array = [1,2,3,4,5,3,1], target = 3
Output: 2
Explanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.
Example 2:

Input: array = [0,1,2,4,2,1], target = 3
Output: -1
Explanation: 3 does not exist in the array, so we return -1.
 

Constraints:

3 <= mountain_arr.length() <= 104
0 <= target <= 109
0 <= mountain_arr.get(index) <= 109 */

/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int len=mountainArr.length();
        int st = 1;
        int en = len-2;
        int peak = -1;
        int[] mntArr = new int[len];
        Arrays.fill(mntArr,-1);
        mntArr[0]=mountainArr.get(0);
        mntArr[len-1]=mountainArr.get(len-1);
        if(mntArr[0]==target)
            return 0;

        // find peak
        while(st<=en)
        {
            int mid = st+(en-st)/2;
            if(mntArr[mid]==-1)
                mntArr[mid] = mountainArr.get(mid);
            if(mntArr[mid-1]==-1)
                mntArr[mid-1] = mountainArr.get(mid-1);
            if(mntArr[mid+1]==-1)
                mntArr[mid+1] = mountainArr.get(mid+1);

            int midEle = mntArr[mid];
            int midPrev = mntArr[mid-1];
            int midNext = mntArr[mid+1];

            if(midPrev<midEle && midEle>midNext)
            { 
                peak=mid;
                break;
            }

            else if(midPrev<midEle && midEle<midNext)
            {
                st=mid+1;
            }
            else
                en=mid-1;
        }

        int ans=-1;
        
        if(target==mntArr[peak])
            return peak;
        
        else if(mntArr[0]<=target && target<mntArr[peak])
        {    
            ans = binarySerachLower(mountainArr,mntArr,target,0,peak-1);
        }
        
        if(ans==-1)
            ans = binarySerachUpper(mountainArr,mntArr,target,peak+1,len-1);

        return ans;
    }

    public int binarySerachLower(MountainArray mountainArr,int[] mntArr, int target,int st,int en)
    {
        while(st<=en)
        {
            int mid=st+(en-st)/2;
            if(mntArr[mid]==-1)
                mntArr[mid]=mountainArr.get(mid);

            int midE=mntArr[mid];
            if(midE==target)
                return mid;
            else if(midE<target)
                st=mid+1;
            else
                en=mid-1;
        }
        return -1;
    }

    public int binarySerachUpper(MountainArray mountainArr,int[] mntArr, int target,int st,int en)
    {
        while(st<=en)
        {
            int mid=st+(en-st)/2;
            if(mntArr[mid]==-1)
                mntArr[mid]=mountainArr.get(mid);
                
            int midE=mntArr[mid];
            if(midE==target)
                return mid;
            else if(midE<target)
                en=mid-1;
            else
                st=mid+1;
        }
        return -1;
    }
}
