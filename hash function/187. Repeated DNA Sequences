/* 187. Repeated DNA Sequences

The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.

For example, "ACGAATTCCG" is a DNA sequence.
When studying DNA, it is useful to identify repeated sequences within the DNA.

Given a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.

 

Example 1:

Input: s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
Output: ["AAAAACCCCC","CCCCCAAAAA"]
Example 2:

Input: s = "AAAAAAAAAAAAA"
Output: ["AAAAAAAAAA"]
 

Constraints:

1 <= s.length <= 105
s[i] is either 'A', 'C', 'G', or 'T'. */

class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        HashMap<Character,Integer> map = new HashMap<Character,Integer>();
        map.put('A',1);
        map.put('C',2);
        map.put('G',3);
        map.put('T',4);

        long p=1;
        long mod = 1000000007;
        long hashFnc = 0;

        if(s.length()<11)
            return new ArrayList<>();
        // System.out.println(s.length());

        for(int i=9;i>=0;i--)
        {
            long curr = (long)map.get(s.charAt(i));
            // System.out.println(curr);
            hashFnc = (hashFnc+(curr*p)%mod)%mod;
            if(i>0)
                p=(p*29)%mod;
        }

        // System.out.println(hashFnc);
        HashSet<Long> hashF = new HashSet<Long>();
        HashSet<String> set = new HashSet<String>();
        hashF.add(hashFnc);

        int st = 1;
        int en = 10;

        while(en<s.length())
        {
            long prev = ((long)map.get(s.charAt(st-1))*p)%mod;
            long next = (long)map.get(s.charAt(en));
            hashFnc = ((((hashFnc - prev + mod)%mod)*29)%mod + next)%mod ;
            
            if(hashF.contains(hashFnc))
            {
                set.add(s.substring(st,en+1));
            }
            else
            {
                hashF.add(hashFnc);
            }
            st++; en++;
        }
        return new ArrayList<>(set);
       
    }
}
