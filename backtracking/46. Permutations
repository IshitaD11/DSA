/* 46. Permutations

Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique. */

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> permute = new ArrayList<>();
        // unique numbers, so we can use a visited array to check
        boolean[] vis = new boolean[nums.length];
        createAllPermute(nums,0,ans,permute,vis);
        return ans;
    }
    public void createAllPermute(int[] nums,int idx,List<List<Integer>> ans,List<Integer> permute,boolean[] vis)
    {
        if(idx==nums.length)
        {
            ans.add(new ArrayList<>(permute));
            return;
        }
        for(int i=0;i<nums.length;i++)
        {
            if(vis[i]==false)
            {
                permute.add(nums[i]);
                vis[i]=true;
                createAllPermute(nums,idx+1,ans,permute,vis);
                vis[i]=false;
                permute.remove(permute.size()-1);
            }
        }
    }
}
