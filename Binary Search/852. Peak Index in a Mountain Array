/* 852. Peak Index in a Mountain Array

An array arr a mountain if the following properties hold:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i] 
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].

You must solve it in O(log(arr.length)) time complexity.

 

Example 1:

Input: arr = [0,1,0]
Output: 1
Example 2:

Input: arr = [0,2,1,0]
Output: 1
Example 3:

Input: arr = [0,10,5,2]
Output: 1
 

Constraints:

3 <= arr.length <= 105
0 <= arr[i] <= 106
arr is guaranteed to be a mountain array. */

//-----------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int len = arr.length;
        int st = 0;
        int en = len-1;
        int mid = st + (en-st)/2;
        int ans=0;
        while(st<=en)
        {
            // System.out.println(arr[mid]+":"+arr[mid+1]);
            // System.out.println("mid"+":"+mid);
            if(arr[mid]<arr[mid+1])
            {
                st=mid+1;
            }
            else if(arr[mid]<arr[mid-1])
            {
                en=mid-1;
            }
            else if((arr[mid]>arr[mid+1]) && (arr[mid]>arr[mid-1]))
            {
                ans = mid;
                break;
            }
            mid = st + (en-st)/2;
        }
        return ans;
    }
}
