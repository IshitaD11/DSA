/* 11. Container With Most Water

You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
 

Constraints:

n == height.length
2 <= n <= 105
0 <= height[i] <= 104 */

/*Two pointer to maintain left max value and left max index, right max value and right max index. increase left and right pointer and keep calculating the area, by (right max index - left max index) * min(leftmax,rightMax) */

class Solution {
    public int maxArea(int[] height) {
        int n=height.length;
        int left = 0;
        int right = n-1;
        int leftMax=height[left];
        int lidx=0;
        int rightMax=height[right];
        int ridx=n-1;
        int ans=Math.min(leftMax,rightMax) * (ridx-lidx);

        while(left<right)
        {
            if(leftMax<rightMax)
            {
                left++;
            
                if(height[left]>leftMax)
                {
                    leftMax = height[left];
                    lidx=left;
                }
            }
            else
            {
                right--;
                if(height[right]>rightMax)
                {
                    rightMax = height[right];
                    ridx=right;
                }
            }
            
            int temp = Math.min(leftMax,rightMax) * (ridx-lidx);
            ans = Math.max(ans,temp);
        }
        return ans;
    }
}
