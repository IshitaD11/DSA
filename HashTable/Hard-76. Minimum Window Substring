/* 76. Minimum Window Substring

Given two strings s and t of lengths m and n respectively, return the minimum window 
substring
 of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
 

Constraints:

m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of uppercase and lowercase English letters.
 

Follow up: Could you find an algorithm that runs in O(m + n) time? */

/*Two pointer to check the characters in a window to match with the characters of t string
First take all characters of t and store their freq in freq array
Next iterate on s, start end pointer from 0, if freq[s(i)]>0 means it was present in t as well, so decrease counter. Once counter 0, means all the characters we already found from 0 to end pointer, increase low pointer to reduce the subarray length, until count is greater than 0, i.e. elements from t is also removed, and the substrig is not valid. 
Again increase end pointer and low pointer as required.
 */

class Solution {
    public String minWindow(String s, String t) {
        int lenS=s.length();
        int lenT=t.length();
        int[] freq = new int[128];

        for(int i=0;i<lenT;i++)
        {
            freq[t.charAt(i)]++;
        }

        int lo=0;
        int hi=0;
        int minLen = Integer.MAX_VALUE;
        int counter = lenT;
        int subStrhead=0;

        while(hi<lenS)
        {
            if(freq[s.charAt(hi)]>0)
            {
                counter--;
            }

            freq[s.charAt(hi)]--;
            hi++;

            while(counter==0)
            {
                if((hi-lo)<minLen)
                {
                    minLen = hi-lo;
                    subStrhead=lo;
                }
                if(freq[s.charAt(lo)]==0)
                {
                    counter++;
                }
                freq[s.charAt(lo)]++;
                lo++;                
            }
        }

        return (minLen==Integer.MAX_VALUE)?"":s.substring(subStrhead,subStrhead+minLen);
    }
}
