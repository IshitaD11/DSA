/* 146. LRU Cache

Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
The functions get and put must each run in O(1) average time complexity.

 

Example 1:

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4
 

Constraints:

1 <= capacity <= 3000
0 <= key <= 104
0 <= value <= 105
At most 2 * 105 calls will be made to get and put. */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/*solution 1: reverse both LL and sum from the start of both LL same as '2. Add Two Numbers'
Solution 2: add the two LL in stacks, as we get data from the top in the stack, will get the end elements, sum up, create new node with the value, and create link prev.next=nn. continue until l1 or l2 or carry is exhausted. At the end need to reverse the nodes. */

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        Stack<Integer> stackl1 = new Stack<Integer>();
        Stack<Integer> stackl2 = new Stack<Integer>();

        // put l1 in stack1
        while(l1!=null)
        {    
            stackl1.push(l1.val);
            l1=l1.next;
        }

        // l2 in stack2
        while(l2!=null)
        {    
            stackl2.push(l2.val);
            l2=l2.next;
        }

        ListNode prev=null;

        int carry=0;
        int sum=0;
        int rem=0;
        while(!stackl1.empty()|| !stackl2.empty() || carry!=0)
        {
            sum=0;
            if(!stackl1.empty())
                sum+=stackl1.pop();
            
            if(!stackl2.empty())
                sum+=stackl2.pop();

            sum+=carry;
            rem=sum%10;
            carry=sum/10;

            ListNode nn=new ListNode(rem);
            // add nodes in reverse order
            nn.next=prev;
            prev=nn;
        }

        return prev; //ending at prev, which is the head
    }
}
