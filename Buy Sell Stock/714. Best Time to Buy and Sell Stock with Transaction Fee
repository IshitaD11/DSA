/* 714. Best Time to Buy and Sell Stock with Transaction Fee

You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.

Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
Example 2:

Input: prices = [1,3,7,5,10,3], fee = 3
Output: 6
 

Constraints:

1 <= prices.length <= 5 * 104
1 <= prices[i] < 5 * 104
0 <= fee < 5 * 104 */

/* there are 3 options on each day: either buy or sell or hold
1. buy on current day = max(already bought on prev day,sold in prev day and buy in current day) = max(prevBuy,prevSell-prices[i])
2. sold on current day = max(sold on prev day,bought on prev day and sold in cuurrent day) = max(prevSell,prevBuy+prices[i])
Also need to consider fee, in any one of the above transaction
*/

class Solution {
    public int maxProfit(int[] prices, int fee) {
        
        // for base case  
        long prevSell = 0;
        long prevBuy = Integer.MIN_VALUE; //so that at (-1) position buy value is min

        for(int i=0;i<prices.length;i++)
        {
            long currentBuy = Math.max(prevBuy,(prevSell-prices[i]));
            long currentSell = Math.max(prevSell,(prevBuy+prices[i]-fee));
            prevBuy=currentBuy;
            prevSell=currentSell;
        }

        return (int)prevSell;
    }
}
