/* 81. Search in Rotated Sorted Array II
There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).

Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].

Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.

You must decrease the overall operation steps as much as possible.

 

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
nums is guaranteed to be rotated at some pivot.
-104 <= target <= 104
 

Follow up: This problem is similar to Search in Rotated Sorted Array, but nums may contain duplicates. Would this affect the runtime complexity? How and why? */


/* always check if left side is sorted --> check st<target<mid --> then search
else move to right side (Right side can be sorted or not). Do the same steps.
If left is not sorted check st<target<mid --> then search in left, else search in right

For duplicate records, check if left is sorted or right is sorted, if not do two pointer to search the target */

// O(logn)<=TC<=O(n)


class Solution {
    public boolean search(int[] nums, int target) {
        int st=0;
        int en = nums.length-1;

        while(st<=en)
        {
            int mid = st+(en-st)/2;
            if(nums[mid]==target)
                return true;
            // check at the left is sorted
            if(nums[st]<nums[mid])
            {
                if(nums[st]<=target && target<nums[mid])
                    en=mid-1;
                else
                    st=mid+1;
            }
            else if(nums[mid]<nums[en]) //else right is sorted and check at the right part
            {
                if(nums[mid]<target && target<=nums[en])
                    st=mid+1;
                else
                    en=mid-1;
            }   
            else //Duplicate elements exists, increase st pointer to get unique elements at 1 side
            {
                if(nums[st]==target || nums[en]==target)
                    return true;
                else
                {
                    st++; en--;
                }
            }    
        }        
        return false;
    }
}
