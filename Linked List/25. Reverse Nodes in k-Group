/* 25. Reverse Nodes in k-Group

Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000
 

Follow-up: Can you solve the problem in O(1) extra memory space? */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
//  divide the LL in K groups, reverse and last node.next=next group's head. recursive call next group, return the head after reversal

class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        
        // break condition if K==1
        if(k==1)
            return head;
        // break conditions, if remaining size less than k
        int size = getLLSize(head);
        if(size<k)
            return head;        

        // reverse first k nodes
        ListNode prev=null;
        ListNode curr=head;
        ListNode next=null;
        for(int i=0;i<k && curr!=null;i++)
        {
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;   
        }

        // prev is the end node, which is new head, next is starting of next k group
        // previous head is the end node, end node.next=next head
        ListNode newHead=prev;        
        head.next=reverseKGroup(next,k);
        return newHead;
    }
    public int getLLSize(ListNode head)
    {
        int size=0;
        while(head!=null)
        {
            head=head.next;
            size++;
        }
        return size;
    }
}
