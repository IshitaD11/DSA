/* 221. Maximal Square

Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 4
Example 2:


Input: matrix = [["0","1"],["1","0"]]
Output: 1
Example 3:

Input: matrix = [["0"]]
Output: 0
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 300
matrix[i][j] is '0' or '1'. */

class Solution {
    public int maximalSquare(char[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
        int[][] dp = new int[n][m];
        int[][] dir = {{-1,0},{-1,-1},{0,-1}};
        int ans=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(matrix[i][j]=='1')
                {
                    if(i==0 || j==0)
                    // at 1 row/col, only 1 area square possible
                    {
                        dp[i][j]=1;
                        ans=Math.max(ans,1);
                    }
                    else
                    {
                        // check for up,left,and up-left cell to find out if it can be made as square. Taking min to identify in each of these cells how long the square is
                        int minLen=Integer.MAX_VALUE;
                        for(int k=0;k<3;k++)
                        {
                            int x=i+dir[k][0];
                            int y=j+dir[k][1];
                            minLen=Math.min(dp[x][y],minLen);
                        }
                        dp[i][j]=minLen+1;
                        ans=Math.max(dp[i][j],ans);
                        // System.out.println(Arrays.deepToString(dp));
                    }
                }
            }
        }
        return ans*ans;
    }
}
