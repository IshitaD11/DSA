/* 1512. Number of Good Pairs

Given an array of integers nums, return the number of good pairs.

A pair (i, j) is called good if nums[i] == nums[j] and i < j.

 

Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
Example 2:

Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.
Example 3:

Input: nums = [1,2,3]
Output: 0
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100 */
//-------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int numIdenticalPairs(int[] nums) {
        /* add (occurance-1) to count from the 2nd occurance to make pairs. 
        For 3rd occurance, we have 2 elements previously. So 3rd element will make 2 pairs with previous element. As we are summing up in all iteration, need to consider the pair of current element with all previous. Other combinations will be considered in their iteration. */

        int count = 0;
        Map<Integer,Integer> mp = new HashMap<Integer,Integer>();
        for(int i=0;i<nums.length;i++)
        {
            mp.put(nums[i],mp.getOrDefault(nums[i],0)+1);
            int tmp = mp.get(nums[i]);
            if(tmp>1)
            {
                count+=(tmp-1); 
            }
        }
        return count;
    }
}
