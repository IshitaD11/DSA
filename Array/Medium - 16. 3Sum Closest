/* 16. 3Sum Closest

Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.

Return the sum of the three integers.

You may assume that each input would have exactly one solution.

 

Example 1:

Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
Example 2:

Input: nums = [0,0,0], target = 1
Output: 0
Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).
 

Constraints:

3 <= nums.length <= 500
-1000 <= nums[i] <= 1000
-104 <= target <= 104 */

//-------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int len = nums.length;
        Arrays.sort(nums);
        int result=Integer.MIN_VALUE;
        for(int i=0;i<len-2;i++)
        {
            int low=i+1;
            int high = len-1;
            while(low<high)
            {
                int sum = nums[i]+nums[low]+nums[high];
                //check if it is first iteration then store the sum in result
                //check if sum is between target and ans (previous sum) i.e. sum-target is less than ans-target
                if(result == Integer.MIN_VALUE || Math.abs(sum-target) < Math.abs(result-target))
                    result = sum;
                if(sum==target)
                    return sum;
                else if(sum<target)
                {
                    low++;
                }
                else if(sum>target)
                {
                    high--;
                }
            }
        }
        return result;
    }
}
