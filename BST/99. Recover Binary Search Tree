/* 99. Recover Binary Search Tree


You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.

 

Example 1:


Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.
Example 2:


Input: root = [3,1,4,null,null,2]
Output: [2,1,4,null,null,3]
Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.
 

Constraints:

The number of nodes in the tree is in the range [2, 1000].
-231 <= Node.val <= 231 - 1
 

Follow up: A solution using O(n) space is pretty straight-forward. Could you devise a constant O(1) space solution? */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//  for BST inorder traversal should be sorted, using the same property, check when prev>curr node. As 2 nodes are swapped, so first occurance we will have the greater element. prev is first element. Again when we find prev>curr, then curr is the 2nd element
// Example: 1 2 5 4 3 --> 5 and 3 to be swapped

class Solution {
    TreeNode prev=null;
    TreeNode first=null;
    TreeNode second=null;

    public void recoverTree(TreeNode root) {
        inOrderTraverse(root);
        swapNodeVal(first,second); //cant swap nodes,as mapping will afect
    }

    public void inOrderTraverse(TreeNode root)
    {
        if(root==null)
            return;
        
        inOrderTraverse(root.left);
        if(prev!=null && prev.val>root.val)
        {
            if(first==null)  //first occurance of mismatch prev is the incorrect node
                first=prev;
            second=root; //current node is the 2nd node
        }
        prev=root;
        inOrderTraverse(root.right);
    }
    public void swapNodeVal(TreeNode first, TreeNode second)
    {
        int temp=first.val;
        first.val=second.val;
        second.val=temp;
    }
}
