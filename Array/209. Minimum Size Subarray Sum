/* 209. Minimum Size Subarray Sum

Given an array of positive integers nums and a positive integer target, return the minimal length of a 
subarray
 whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

 

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1
Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0
 

Constraints:

1 <= target <= 109
1 <= nums.length <= 105
1 <= nums[i] <= 104
 

Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)). */

class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        // slide window of non fixed length and carry forward the sum, check only by the sum is '<target' / '>target' / '=target'

        int n=nums.length;
        int sum = 0;
        int subarrlen = n;
        int stIdx = 0;
        int enIdx = 0;

        for(int i=0;i<n;i++)
        {
            sum=sum+nums[i];
        }
        if(sum<target)
            return 0;

        sum=0;
        while(enIdx<n)
        {
            sum = sum + nums[enIdx];

            while(sum>=target)
            {
                subarrlen = Math.min(subarrlen,(enIdx-stIdx+1));
                sum = sum - nums[stIdx];
                stIdx++;
            }
            enIdx++;
        }      
        return subarrlen;
    }
}
