/* 435. Non-overlapping Intervals

Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

 

Example 1:

Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.
Example 2:

Input: intervals = [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.
Example 3:

Input: intervals = [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
 

Constraints:

1 <= intervals.length <= 105
intervals[i].length == 2
-5 * 104 <= starti < endi <= 5 * 104 */

class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        // sort the matrix by first column
        Arrays.sort(intervals,new Comparator<int[]>(){
            @Override
            public int compare(int[] a,int[] b)
            {
                if(a[0]==b[0])
                    return a[1]-b[1]; //based on 2nd pos
                else
                    return a[0]-b[0];                
            }
        });

        // System.out.println(Arrays.deepToString(intervals));
        int count=0;
        // co ordinate to comapare with each row
        int x0=intervals[0][0];
        int y0=intervals[0][1];

        for(int i=1;i<intervals.length;i++)
        {
            int xi=intervals[i][0];
            int yi=intervals[i][1];

            // if not overlapping, update the co ordinates to current one, and continue
            if(y0<=xi)
            {
                x0=intervals[i][0];
                y0=intervals[i][1];
            }

            // if overlapping, increase count and update the co ordinates to the min yi 
            else
            {
                count++;
                if(y0>yi)
                {
                    x0=xi;
                    y0=yi;
                }
            }
        }
        return count;
    }
}
