/* 2592. Maximize Greatness of an Array

You are given a 0-indexed integer array nums. You are allowed to permute nums into a new array perm of your choosing.

We define the greatness of nums be the number of indices 0 <= i < nums.length for which perm[i] > nums[i].

Return the maximum possible greatness you can achieve after permuting nums.

 

Example 1:

Input: nums = [1,3,5,2,1,3,1]
Output: 4
Explanation: One of the optimal rearrangements is perm = [2,5,1,3,3,1,1].
At indices = 0, 1, 3, and 4, perm[i] > nums[i]. Hence, we return 4.
Example 2:

Input: nums = [1,2,3,4]
Output: 3
Explanation: We can prove the optimal perm is [2,3,4,1].
At indices = 0, 1, and 2, perm[i] > nums[i]. Hence, we return 3.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109 */

/* [1,3,5,2,1,3,1] ==> sorting [1,1,1,2,3,3,5] ==> observe if we can shift elements to left, we will get prem[i]>nums[i]
nums = [1,1,1,2,3,3,5]
perm = [1,1,2,3,3,5,1] --> some elements are perm[i]>arr[i]

perm is the right pointer, until we get nums[r]>nums[l], increase r.
if we find such element where nums[r]>nums[l], then it is valid pair, increase count. as these elements are already considered. increase both l and r.  */

class Solution {
    public int maximizeGreatness(int[] nums) {
        Arrays.sort(nums);
        int l=0;
        int r=1;
        int cnt=0;

        while(r<nums.length)
        {
            if(nums[r]>nums[l])
            {
                cnt++;
                l++;
                r++;
            }
            else
            {
                r++;
            }
        }
        return cnt;
    }
}
