/* You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.

Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.

 

Example 1:

Input: flowerbed = [1,0,0,0,1], n = 1
Output: true
Example 2:

Input: flowerbed = [1,0,0,0,1], n = 2
Output: false
 

Constraints:

1 <= flowerbed.length <= 2 * 104
flowerbed[i] is 0 or 1.
There are no two adjacent flowers in flowerbed.
0 <= n <= flowerbed.length */
//----------------------------------------------------------------------------------------------------------------------------------------------

/* need to traverse the whole array and find suitable places to put the flow, when suitable case found, put the flower by a[i]=1 and decrease the flower count. There could be 3 cases where we can put the flower:
    1. at A[0], given A[1] is also 0
    2. At A[n-1], given A[n-2] is also 0
    3. at A[i], given A[i+1] & A[i-1] is also 0 
    there 3 points can be combined: check (i) A[i]=0 (ii) i=0 or A[i-1]=0 (iii) i=n-1 or A[i+1]=0
    */ 

class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int len=flowerbed.length;
        if(n==0)
            return true;
        for(int i=0;i<len;i++)
        { 
            if(flowerbed[i]==0 && (i==0 || flowerbed[i-1]==0) && (i==len-1 || flowerbed[i+1]==0))                   
        {
            flowerbed[i]=1;
            n--;
        }        
            if(n==0)
                return true;
        }
        return false;
    }
}
