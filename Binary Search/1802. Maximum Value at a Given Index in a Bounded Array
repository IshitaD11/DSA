/* 1802. Maximum Value at a Given Index in a Bounded Array

You are given three positive integers: n, index, and maxSum. You want to construct an array nums (0-indexed) that satisfies the following conditions:

nums.length == n
nums[i] is a positive integer where 0 <= i < n.
abs(nums[i] - nums[i+1]) <= 1 where 0 <= i < n-1.
The sum of all the elements of nums does not exceed maxSum.
nums[index] is maximized.
Return nums[index] of the constructed array.

Note that abs(x) equals x if x >= 0, and -x otherwise.

 

Example 1:

Input: n = 4, index = 2,  maxSum = 6
Output: 2
Explanation: nums = [1,2,2,1] is one array that satisfies all the conditions.
There are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].
Example 2:

Input: n = 6, index = 1,  maxSum = 10
Output: 3
 

Constraints:

1 <= n <= maxSum <= 109
0 <= index < n */

/* Pattern ==>  1 2 3 2 1 1 1
Centre at the index, put max value at index, and reduce the numbers at both sides, and check if sum is <= Maxsum or not */

class Solution {
    public int maxValue(int n, int index, int maxSum) {

        // Binary search the max number possible
        int s=1;
        int e=maxSum-n+1;
        int mid = s + (e-s)/2;
        int ans=0;

        while(s<=e)
        {
            // System.out.println("mid:"+mid);
            boolean res = isPossible(mid,index,maxSum,n);
            // System.out.println("res:"+res);
            if(res==true)
            {
                s=mid+1;
                ans = mid;
            }    
            else
                e=mid-1;
            mid = s + (e-s)/2;
        }
        return ans;
    }

    public boolean isPossible(int num,int index,int maxSum,int n)
    {
        long tempNum=num-1;
        long sum = num;
        long left = index-1;
        long right=index+1;

        // for left side
        long leftMin = tempNum - left;
        if(leftMin>0)
            sum = sum + ((tempNum+leftMin)*(tempNum-leftMin+1)/2);
        else
            sum+=(tempNum*(tempNum+1))/2;
        // System.out.println("Sum:"+sum);

        // for right side
        long rightMin=tempNum - (n-right-1);
        if(rightMin>0)
            sum = sum + ((tempNum+rightMin)*(tempNum-rightMin+1)/2);
        else
            sum+=(tempNum*(tempNum+1))/2;
        // System.out.println("Sum:"+sum);

        // remaining 1's
        if(index-num+1>0)
            sum+=(index-num+1);

        if(n-index-num>0)
            sum+=(n-index-num);
        
        // System.out.println("Sum:"+sum);
        if(sum>maxSum)
            return false;
        
        return true;
    }
}
