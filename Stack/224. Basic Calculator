/* 224. Basic Calculator

Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.

Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().

 

Example 1:

Input: s = "1 + 1"
Output: 2
Example 2:

Input: s = " 2-1 + 2 "
Output: 3
Example 3:

Input: s = "(1+(4+5+2)-3)+(6+8)"
Output: 23
 

Constraints:

1 <= s.length <= 3 * 105
s consists of digits, '+', '-', '(', ')', and ' '.
s represents a valid expression.
'+' is not used as a unary operation (i.e., "+1" and "+(2 + 3)" is invalid).
'-' could be used as a unary operation (i.e., "-1" and "-(2 + 3)" is valid).
There will be no two consecutive operators in the input.
Every number and running calculation will fit in a signed 32-bit integer. */

class Solution {
    public int calculate(String s) {
        int sum =0;
        int sign=1;
        Stack<Integer> operand = new Stack<>();
        int num=Integer.MIN_VALUE;

        for(int i=0;i<s.length();i++)
        {
            char curr=s.charAt(i);

            if(curr>='0' && curr<='9')
            {
                if(num==Integer.MIN_VALUE)
                    num=0;
                num=num*10+(int)(curr-'0');
                continue;
            }

            if(num!=Integer.MIN_VALUE)
            {
                num=num*sign;
                sum+=num;
                num=Integer.MIN_VALUE;
                sign=1;
            }

            if(curr=='(')
            {
                operand.push(sum);
                operand.push(sign); //to keep note of last operator before ()
                sum=0;
                sign=1;
            }
            else if(curr==')')
            {
                sum*=operand.pop();
                sum+=operand.pop();
            }
            else if(curr=='-') 
                sign*=-1;
        }
        if(num!=Integer.MIN_VALUE)
        {
            num=num*sign;
            sum+=num;
        }
        return sum;
    }
}


// 1-(-2) --> (-1)*(-1) = +1
