/* 2251. Number of Flowers in Full Bloom

You are given a 0-indexed 2D integer array flowers, where flowers[i] = [starti, endi] means the ith flower will be in full bloom from starti to endi (inclusive). You are also given a 0-indexed integer array people of size n, where people[i] is the time that the ith person will arrive to see the flowers.

Return an integer array answer of size n, where answer[i] is the number of flowers that are in full bloom when the ith person arrives.

 

Example 1:


Input: flowers = [[1,6],[3,7],[9,12],[4,13]], poeple = [2,3,7,11]
Output: [1,2,2,2]
Explanation: The figure above shows the times when the flowers are in full bloom and when the people arrive.
For each person, we return the number of flowers in full bloom during their arrival.
Example 2:


Input: flowers = [[1,10],[3,3]], poeple = [3,3,2]
Output: [2,2,1]
Explanation: The figure above shows the times when the flowers are in full bloom and when the people arrive.
For each person, we return the number of flowers in full bloom during their arrival.
 

Constraints:

1 <= flowers.length <= 5 * 104
flowers[i].length == 2
1 <= starti <= endi <= 109
1 <= people.length <= 5 * 104
1 <= people[i] <= 109 */

// TC: O(nlogn+nlogm) SC:O(n)
class Solution {
    public int[] fullBloomFlowers(int[][] flowers, int[] people) {
        // idea is to check for each people's arrival, how many begining time started and how many ending time ended. Begin-end is the answer. For this we need to segregate the begin time and end time array. Sort each array to apply binary search on them.

        // Split by begin and end time
        int n=flowers.length;
        int[] begin = new int[n];
        int[] end = new int[n];

        for(int i=0;i<n;i++)
        {
            begin[i]=flowers[i][0];
            end[i]=flowers[i][1];
        }
        // sort both arrays
        Arrays.sort(begin);
        Arrays.sort(end);

        int[] ans = new int[people.length];

        for(int i=0;i<people.length;i++)
        {
            int start = binarySearchUpper(people[i],begin);
            int finish = binarySearchLower(people[i],end);
            ans[i]=start-finish;
        }
        return ans;
    }

    public int binarySearchUpper(int idx,int[] arr)
    {
        int st=0;
        int en=arr.length-1;
        while(st<=en)
        {
            int mid = st+(en-st)/2;
            if(arr[mid]<=idx)
            {
                st=mid+1;
            }
            else
                en=mid-1;
        }
        return st;
    }

    public int binarySearchLower(int idx,int[] arr)
    {
        int st=0;
        int en=arr.length-1;
        int ans=0;

        while(st<=en)
        {
            int mid = st+(en-st)/2;
            if(arr[mid]<idx)
            {
                st=mid+1;
            }
            else
                en=mid-1;
        }
        return st;
    }
}
