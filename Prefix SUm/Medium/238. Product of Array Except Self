//238. Product of Array Except Self

/*Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
 

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)
Do this follow up */

//--------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int[] productExceptSelf(int[] nums) {
        /* using two array prefix and suffix product
        int len= nums.length;
        int[] prod_pf = new int[len];
        int[] prod_sf = new int[len];
        int[] result = new int[len];
        prod_pf[0]=nums[0];
        prod_sf[len-1]=nums[len-1];
        for(int indx=1;indx<len;indx++)
        {
            prod_pf[indx]=prod_pf[indx-1]*nums[indx];
            prod_sf[len-indx-1]=prod_sf[len-indx]*nums[len-indx-1];
        }
        
        // 0th position product
        result[0]=prod_sf[1];
        // last psotion product
        result[len-1]=prod_pf[len-2];
        for(int indx=1;indx<len-1;indx++)
        {
            result[indx]=prod_pf[indx-1]*prod_sf[indx+1];
        }
        return result;*/

        /*Using O(1) space complexity, approch same as above but here, store prefix and suffix in the actual array to decrease SC */

        int len= nums.length;
        int[] result = new int[len];

        result[len-1]=nums[len-1];
        // store suffix product in result array
        for(int i=len-2;i>=0;i--)
        {
            result[i]=result[i+1]*nums[i];
        }
        // store prefix product in nums
        for(int i=1;i<len;i++)
        {
            nums[i]=nums[i-1]*nums[i];
        }
        
        //get the ans arraya
        result[0]=result[1];
        for(int i=1;i<len-1;i++)
        {
            result[i]=nums[i-1]*result[i+1];
        }
        result[len-1]=nums[len-2];
        return result;

    }
}
