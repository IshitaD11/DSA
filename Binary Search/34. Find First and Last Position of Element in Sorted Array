/* 34. Find First and Last Position of Element in Sorted Array

Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109 */
//------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int size = nums.length;
        int start = 0;
        int end=size-1;
        int mid = start + (end-start)/2;
        int[] ans = new int[2];
        int temp=-1;
        int cnt=0;
        while(start<=end)
        {
            if(nums[mid]>target)
            {
                end=mid-1;
            }
            else if(nums[mid]<target)
            {
                start= mid+1;
            }
            else
            {
                temp=mid;
                end=mid-1;
            }
            mid=start+((end-start)/2);
        }
        ans[0]=temp;
        start = 0;
        end=size-1;
        mid = start + (end-start)/2;
        while(start<=end)
        {
            if(nums[mid]>target)
            {
                end=mid-1;
            }
            else if(nums[mid]<target)
            {
                start= mid+1;
            }
            else
            {
                temp=mid;
                start=mid+1;
            }
            mid=start+((end-start)/2);
        }
        ans[1]=temp;
        return ans;
    }
    
}
