/* Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 
Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100 */
//--------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result = new ArrayList<Integer>();
        int startRow=0;
        int startCol=0;
        int endRow=matrix.length-1;
        int endCol=matrix[0].length-1;

        while(startRow<=endRow && startCol<=endCol)
        {
            //traverse Top row: colomn value will change only
            for(int i=startCol;i<=endCol;i++)
            {
                result.add(matrix[startRow][i]);
            }

            //if there is only 1 row, after adding the top row, no need to add any other elements
            if(startRow==endRow)
                break;

            //traverse right col: row value will change only
            for(int i=startRow+1;i<=endRow;i++)
            {
                result.add(matrix[i][endCol]);
            }

            //if there is only 1 column, after adding the right col, no need to add any other elements
            if(startCol==endCol)
                break;

            //traverse bottom row: col value will change only
            for(int i=endCol-1;i>=startCol;i--)
            {
                result.add(matrix[endRow][i]);
            }

            //traverse left col: row value will change only. 
            for(int i=endRow-1;i>startRow;i--) // i>startRow, as need to skip 00 position
            {
                result.add(matrix[i][startCol]);
            }

            startRow++;
            startCol++;
            endRow--;
            endCol--;
        }
        return result;
    }
}
