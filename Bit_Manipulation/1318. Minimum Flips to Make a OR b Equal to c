/* 1318. Minimum Flips to Make a OR b Equal to c

Given 3 positives numbers a, b and c. Return the minimum flips required in some bits of a and b to make ( a OR b == c ). (bitwise OR operation).
Flip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.

 

Example 1:



Input: a = 2, b = 6, c = 5
Output: 3
Explanation: After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)
Example 2:

Input: a = 4, b = 2, c = 7
Output: 1
Example 3:

Input: a = 1, b = 2, c = 3
Output: 0
 

Constraints:

1 <= a <= 10^9
1 <= b <= 10^9
1 <= c <= 10^9 */

/* in how many cases we have to flip a particular bit? (when both OR and c is set/unset then no need to do anything)
1. when OR is unset and c is set >> in this case to make the unset bit set, we can flip any number a or b. [ 1|0 = 1 ] . So min flip = 1.
2. when OR is set and c is unset >> in this case to make the set bit unset, check how if both A and B has the bits set of not. As 
(1|1=1) >> then 2 flips required
(1|0=1) >> then 1 flip required
(0|1=1) >> then 1 flip
count the set bits in a and b, and add to count.
*/

class Solution {
    public int minFlips(int a, int b, int c) {
        int aORb=a|b;
        int cnt=0;
        for(int i=0;i<32;i++)
        {
            if((((aORb>>i)&1)==1) && (((c>>i)&1)!=1))
            {
                if(((a>>i)&1)==1)
                    cnt++;
                if(((b>>i)&1)==1)
                    cnt++;
            }  
            else if((((aORb>>i)&1)==0) && (((c>>i)&1)==1))
            {
                cnt++;
            }
        }
        return cnt;
    }
}
