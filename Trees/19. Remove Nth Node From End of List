/* 19. Remove Nth Node From End of List

Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz
 

Follow up: Could you do this in one pass? */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        /*if(head.next==null && n==1)
          return null;
        ListNode temp = head;
        int len=0;
        while(temp!=null)
        {
          len++;
          temp=temp.next;
        }
        int pos=len-n;
        temp=head;
        if(n==len)
          return head.next;
        while(pos>1)
        {  
          temp=temp.next;
          pos--;
        }
        temp.next=temp.next.next;
        return head;*/

        // In one pass: take two pointers slow and fast. there should be n nodes between these two pointers, so that when fast reaches null, slow will be just before the node to be skipped. Move fast pointer n+1 times, then move both slow and fast together
        // Dummy node to handle if it needs to skip at the head
        ListNode Dummy = new ListNode(0);
        Dummy.next=head;
        ListNode slow=Dummy;
        ListNode fast = Dummy;
        for(int i=0;i<=n;i++)
        {
            fast=fast.next;
        } 
        // move both nodes together
        while(fast!=null)
        {
            slow=slow.next;
            fast=fast.next;
        }
        slow.next=slow.next.next;
        return Dummy.next;
    }
}
