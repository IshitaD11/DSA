/* 18. 4Sum
Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
 

Constraints:

1 <= nums.length <= 200
-109 <= nums[i] <= 109
-109 <= target <= 109 */

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        // element 1 loop from 0 to less than n-3
        // element 2 loop from i+1 to less than n-2
        // element 3 --> j+1 th element
        // element 4 --> n-1 th element
        // take sum of 4 : if sum>0 decrease ele4. if sum<0 increase ele3
        // TC:O(n^3)
        int n=nums.length;
        List<List<Integer>> ans = new ArrayList<>();
        
        Arrays.sort(nums);

        for(int e1=0;e1<n-3;e1++)
        {
            for(int e2=e1+1;e2<n-2;e2++)
            {
                int e3=e2+1;
                int e4=n-1;
                while(e3<e4)
                {
                    // System.out.println("e3"+e3);
                    long sum = (long)nums[e1]+(long)nums[e2]+(long)nums[e3]+(long)nums[e4];
                    
                    if(sum==target)
                    {
                        List<Integer> list=Arrays.asList(nums[e1],nums[e2],nums[e3],nums[e4]);
                    
                        if(!ans.contains(list))
                            ans.add(list);
                    }
                    if(sum>target)
                    {
                        e4--;
                    }
                    else
                        e3++;
                }
            }
        }
        
        return ans;
    }
}
