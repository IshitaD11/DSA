/* 931. Minimum Falling Path Sum

Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

 

Example 1:


Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.
Example 2:


Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is shown.
 

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 100
-100 <= matrix[i][j] <= 100 */

//TC:O(n*m) SC:O(n*m)

class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n=matrix.length;
        int[][] dp = new int[n][n];
        int[][] d = {{-1,-1},{-1,0},{-1,1}}; //3 directions
        int min=Integer.MAX_VALUE;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i==0)
                {    
                    dp[i][j]=matrix[i][j];
                    continue;
                }
                
                min=Integer.MAX_VALUE; 
                for(int k=0;k<3;k++)
                {
                    int id = i+d[k][0];
                    int jd = j+d[k][1];
                    if(id>=0 && jd>=0 && id<n && jd<n)
                        min=Math.min(min,dp[id][jd]); //get min of 3 directions, which ever is possible path
                }
                dp[i][j]=matrix[i][j]+min;
            }
        }

        // get min of last row
        min=Integer.MAX_VALUE;
        for(int i=0;i<n;i++)
            min = Math.min(min,dp[n-1][i]);
        return min;
    }
}
