/* 744. Find Smallest Letter Greater Than Target

You are given an array of characters letters that is sorted in non-decreasing order, and a character target. There are at least two different characters in letters.

Return the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters.

 

Example 1:

Input: letters = ["c","f","j"], target = "a"
Output: "c"
Explanation: The smallest character that is lexicographically greater than 'a' in letters is 'c'.
Example 2:

Input: letters = ["c","f","j"], target = "c"
Output: "f"
Explanation: The smallest character that is lexicographically greater than 'c' in letters is 'f'.
Example 3:

Input: letters = ["x","x","y","y"], target = "z"
Output: "x"
Explanation: There are no characters in letters that is lexicographically greater than 'z' so we return letters[0].
 

Constraints:

2 <= letters.length <= 104
letters[i] is a lowercase English letter.
letters is sorted in non-decreasing order.
letters contains at least two different characters.
target is a lowercase English letter. */

class Solution {
    public char nextGreatestLetter(char[] letters, char target) {
        int n=letters.length;
        // Binary search
        int st = 0;
        int en= n-1;
        int mid = st+(en-st)/2;
        while(st<en)
        {
            if(letters[mid]==target)
                break;
            else if(letters[mid]<target)
                st=mid+1;
            else
                en=mid;
            mid=st+(en-st)/2;
        }
        //if target found and there is a larger letter exists, find that letter
        if(letters[mid]==target && letters[n-1]!=target)
        {
            mid++;
            while(mid<n)
            {
                if(letters[mid]>target)
                    return letters[mid];
                mid++;
            }
        }
        //mid doesnot exists, binary search returned larger than target index
        else if(letters[mid]>target) 
            return letters[mid];
        return letters[0];
    }
}
