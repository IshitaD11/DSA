/* 115. Distinct Subsequences

Given two strings s and t, return the number of distinct subsequences of s which equals t.

The test cases are generated so that the answer fits on a 32-bit signed integer.

 

Example 1:

Input: s = "rabbbit", t = "rabbit"
Output: 3
Explanation:
As shown below, there are 3 ways you can generate "rabbit" from s.
rabbbit
rabbbit
rabbbit
Example 2:

Input: s = "babgbag", t = "bag"
Output: 5
Explanation:
As shown below, there are 5 ways you can generate "bag" from s.
babgbag
babgbag
babgbag
babgbag
babgbag
 

Constraints:

1 <= s.length, t.length <= 1000
s and t consist of English letters. */

// try to match each char of s with t. If matches try to match s[i-1] with t[j] again and s[i-1] with t[j-1]. The both possibilities to consider. If s[i] not matches with t[j], then match s[i-1] with t[j]
// create 2d array, and match all these in each iteration
// TC:O(n*m)
class Solution {
    public int numDistinct(String s, String t) {
        
        int[][] dp = new int[s.length()+1][t.length()+1];

        // 0 length s matches with s for subsequnce length 0 -- 1 way
        // when s length 0 then not possible to match with t, so dp[0] is 0
        dp[0][0]=1;

        // iterate for 0 to i char of t, how many ways we can match with s
        for(int i =1; i<=s.length(); i++){
            dp[i][0]=1;
            for(int j =1; j<=t.length(); j++){
                if(s.charAt(i-1)==t.charAt(j-1)){
                    dp[i][j] = dp[i-1][j] + dp[i-1][j-1];
                }
                else
                    dp[i][j] = dp[i-1][j];
                // System.out.println(Arrays.deepToString(dp));
            }
        }
        return dp[s.length()][t.length()];
    }
}
