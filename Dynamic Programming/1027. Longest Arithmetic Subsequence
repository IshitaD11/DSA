/* 1027. Longest Arithmetic Subsequence

Given an array nums of integers, return the length of the longest arithmetic subsequence in nums.

Note that:

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.
A sequence seq is arithmetic if seq[i + 1] - seq[i] are all the same value (for 0 <= i < seq.length - 1).
 

Example 1:

Input: nums = [3,6,9,12]
Output: 4
Explanation:  The whole array is an arithmetic sequence with steps of length = 3.
Example 2:

Input: nums = [9,4,7,2,10]
Output: 3
Explanation:  The longest arithmetic subsequence is [4,7,10].
Example 3:

Input: nums = [20,1,15,3,10,5,8]
Output: 4
Explanation:  The longest arithmetic subsequence is [20,15,10,5].
 

Constraints:

2 <= nums.length <= 1000
0 <= nums[i] <= 500 */

/*Need to identify if the current position nums[i] creates arithmatic subsequence with its elements at the left. For each i check elements from 0 to i-1.
for diff = a[i]-a[j] , check if this diff was already present in dp array for j, and get the count+1. That means arithmatic diff was already present at that j, and adding i to will give count+1. putting the same in hashmap. keep track of the longest subsequence/count by far */

class Solution {
    public int longestArithSeqLength(int[] nums) {

        int len = nums.length;
        if(len<=2)
            return len;
        
        HashMap<Integer,Integer>[] diffFreq = new HashMap[len];

        int longest = 0;
        for(int i=0;i<len;i++)
        {
            diffFreq[i] = new HashMap<Integer,Integer>();
            for(int j=0;j<i;j++)
            {
                int diff = nums[i]-nums[j];
                diffFreq[i].put(diff , diffFreq[j].getOrDefault(diff,1)+1);
                longest = Math.max(longest,diffFreq[i].get(diff));
            }
        }
        // System.out.println(diffFreq.keySet());
        return longest;
    }
}
