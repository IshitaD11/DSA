/* 328. Odd Even Linked List


Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

The first node is considered odd, and the second node is even, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.

You must solve the problem in O(1) extra space complexity and O(n) time complexity.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]
Example 2:


Input: head = [2,1,3,5,6,4,7]
Output: [2,3,6,7,1,5,4]
 

Constraints:

The number of nodes in the linked list is in the range [0, 104].
-106 <= Node.val <= 106 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        // keep two pointers odd and even, keep adding nodes to this pointers
        ListNode odd = head;
        ListNode even = new ListNode(0);
        ListNode newHead=head;
        ListNode evenHead=even;
        int counter=2; //already taking 1st node in odd, so start counter from 2nd position
        
        if(head==null)
            return null;
        
        // head is already at odd pointer, start from next node
        head=head.next;

        while(head!=null)
        {
            if(counter%2==0)
            {
                even.next=head;
                even=even.next;
            }
            else
            {
                odd.next=head;
                odd=odd.next;
            }
            head=head.next;
            counter++;
        }
        // join end of odd, with start of even
        odd.next=evenHead.next;
        // end even LL with null
        even.next=null;
        return newHead;
    }
}
