/* 55. Jump Game

You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 105 */

class Solution {
    public boolean canJump(int[] nums) {
        // check the max jump index we can go to, it will be the boundary we can go to from index i. if boundary goes >= len-1, then return true

        int boundary=0;
        if(nums.length==1)
            return true;
        int indx=0;
        while(indx<=boundary)
        {
            int jump = indx+nums[indx]; //from i, we can go to jump index
            boundary=Math.max(boundary,jump); 
            if(boundary>=(nums.length-1))
                return true;
            indx++;
        }
        return false;
    }
}
