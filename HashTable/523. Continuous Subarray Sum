/* 523. Continuous Subarray Sum

Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.

A good subarray is a subarray where:

its length is at least two, and
the sum of the elements of the subarray is a multiple of k.
Note that:

A subarray is a contiguous part of the array.
An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.
 

Example 1:

Input: nums = [23,2,4,6,7], k = 6
Output: true
Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.
Example 2:

Input: nums = [23,2,6,4,7], k = 6
Output: true
Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.
42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.
Example 3:

Input: nums = [23,2,6,4,7], k = 13
Output: false
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109
0 <= sum(nums[i]) <= 231 - 1
1 <= k <= 231 - 1 */

/*If 6%5=1 then (6+5)%5=1 --> so for a subarray sum (6+5)-6 = 5 
To find subarray sum is multiple of K, store the nums[i]%k in hashmap, with its position (i+1). The subarray length to be atleast 2, the previously found value, should be atleast<i.
nums[i]=23, 2, 4, 6, 7
sum    =23,25,29,35,42
%6     = 5, 1, 5, 5, 0
(i+1)  = 1, 2, 3, 4, 5
i      = 0  1  2  3  4
when we reach 2nd 5, i=2, and hashMap.get = 1 --> 1<2 --> valid
when we reach 3rd 5, i=3 and previous 5 is having (i+1)=3 --> length 1 subarray, not valid
we want to store the highest distance, so no need to change the index in hashMap, for 2nd 5 */

class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
        map.put(0,0);
        int sum=0;
        int mod =0;
        for(int i=0;i<nums.length;i++)
        {
            sum+=nums[i];
            mod= sum%k;
            if(!map.containsKey(mod))   //if already exists do not update the index
                map.put(mod,(i+1));
            else if(map.get(mod)<i)
            {
                return true;
            }
        }
        return false;
    }
}
