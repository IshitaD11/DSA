/* 20. Valid Parentheses
Easy

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'. */
//--------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public boolean isValid(String s) {
        Map<Character,Character> mp = new HashMap<Character,Character> ();
        int len = s.length();
        Stack<Character> stack= new Stack<Character>();

        mp.put(')','(');
        mp.put('}','{');
        mp.put(']','[');

        for(int i=0;i<len;i++)
        {
            char x=s.charAt(i);
            switch(x)
            {
                case '(': 
                case '{':
                case '[': stack.push(x);
                            break;
                case ')':
                case '}':
                case ']':
                    if(stack.empty() || mp.get(x) != stack.pop())
                        return false;
                    break;

            }
        }
        return stack.empty();
    }
}
