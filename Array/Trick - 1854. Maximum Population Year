/* You are given a 2D integer array logs where each logs[i] = [birthi, deathi] indicates the birth and death years of the ith person.

The population of some year x is the number of people alive during that year. The ith person is counted in year x's population if x is in the inclusive range [birthi, deathi - 1]. Note that the person is not counted in the year that they die.

Return the earliest year with the maximum population.

 

Example 1:

Input: logs = [[1993,1999],[2000,2010]]
Output: 1993
Explanation: The maximum population is 1, and 1993 is the earliest year with this population.
Example 2:

Input: logs = [[1950,1961],[1960,1971],[1970,1981]]
Output: 1960
Explanation: 
The maximum population is 2, and it had happened in years 1960 and 1970.
The earlier year between them is 1960.
 

Constraints:

1 <= logs.length <= 100
1950 <= birthi < deathi <= 2050 */
//---------------------------------------------------------------------------------------------------------------------------------------------------
Intuition:
Let's understand with an example
Suppose we are given the log [1950, 1961]
This means birth year is 1950 and death year is 1961
Therefore, years from 1950 to 1960 will be incremented by 1.

We can do it by iterating from 1950 to 1960 but that will increase time complexity if we have to do it for every query in logs array.

To do this in O(1), we increment year[1950] by 1 and decrement year[1961] by 1.
We can reapeat this for every query in logs array.

What will this do ?

For the case [1950, 1961], let's look at how the array will look like

1950	1951	1952	1953	1954	1955	1956	1957	1958	1959	1960	1961	1962	1963	1964	1965
1	    0	    0	    0	    0	    0	    0	    0	    0	    0	    0	    -1    0	    0	    0	    0

But this is not the desired result ?

To get the answer,
After iterating through all the queries, take prefix sum of the array(year)
This is how the array will look like

1950	1951	1952	1953	1954	1955	1956	1957	1958	1959	1960	1961	1962	1963	1964	1965
1	    1	    1	    1	    1	    1	    1	    1	    1	    1	    1     0	    0	    0	    0	    0

You can see that the Prefix Sum row will give the desired result as we have incremented the values of array from index 1950 to 1960.

Let's try for the test case, logs = [[1950,1961],[1960,1965],[1963,1970]] for a better understanding

Year->    1950	1951	1952	1953	1954	1955	1956	1957	1958	1959	1960	1961	1962	1963	1964	1965  1966	1967	1968	1969	1970
logs[1]->  1	    0	    0	    0	    0	    0	    0	    0	    0	    0	    0	  -1	    0	    0	    0	    0    0     0     0     0     0
logs[2]->  1	    0	    0	    0	    0	    0	    0	    0	    0	    0	    1	  -1	    0	    0	    0	    -1   0     0     0     0     0
logs[3]->  1	    0	    0	    0	    0	    0	    0	    0	    0	    0	    1	  -1	    0	    1	    0	    -1   0     0     0     0     -1
PF ->      1	    1	    1	    1	    1     1     1     1     1     1     2    1      1     2     2     1     1     1     1     1     0

Looking at the Prefix Sum, we can clearly see that the maximum value is 2 and its first occurence is at 1960. Hence, 1960 is the answer. */
//-----------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int maximumPopulation(int[][] logs) {
        int[] year = new int[101];
        int len = logs.length;
        for(int i=0;i<len;i++)
        {
            year[logs[i][0]-1950]++; //increment birth year
            year[logs[i][1]-1950]--; //decrease death year
        }
        int maxYear=1950; //initialize max year from 1950
        int cnt=year[0]; //and count is the value in year array at 1950 year 
        for(int i=1;i<101;i++)
        {
            year[i]+=year[i-1]; //get the prefix sum
            if(year[i]>cnt) 
            {
                maxYear=1950+i;
                cnt=year[i];
            }
        }
        return maxYear;
    }
}
