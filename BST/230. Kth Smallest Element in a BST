/* 230. Kth Smallest Element in a BST

Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

 

Example 1:


Input: root = [3,1,4,null,2], k = 1
Output: 1
Example 2:


Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
 

Constraints:

The number of nodes in the tree is n.
1 <= k <= n <= 104
0 <= Node.val <= 104
 

Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize? */

Can create new TreeNode class which will have counter as a variable

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//  TC:O(n) SC:O(h)
class Solution {
    int cnt=0;
    public int kthSmallest(TreeNode root, int k) {
        if(root==null)
            return -1;
        int l = kthSmallest(root.left,k);
        if(l!=(-1))
            return l;
        cnt++;
        if(cnt==k)
            return root.val;
        int r= kthSmallest(root.right,k);
        if(r!=(-1))
            return r;
        return -1;
    }
}
