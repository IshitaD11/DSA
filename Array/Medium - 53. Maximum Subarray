/* Given an integer array nums, find the 
subarray
 with the largest sum, and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
 

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle. */
//-----------------------------------------------------------------------------------------------------------------------------------------------------

/* 2 imporatant variable: MaxSoFar=Maximum sum of a subarray found till current element. 
MaxEnding=Sum of the subarray selected.
>> traverse the whole array and sum the elements 1 by 1. 
    1. If the sum is more than previous sum, then take the new sum as max sum. MaxSoFar = MaxEnding
    2. If it is less, then discard the previously taken sub-array. need to start a new sub-array. Start the sum from 0. MaxEnding=0 */

class Solution {
    public int maxSubArray(int[] nums) {
        
        int MaxSoFar = Integer.MIN_VALUE;
        int MaxEnding = 0; 
        int n=nums.length;
        
        for (int i=0;i<n;i++)
        {
            MaxEnding=MaxEnding+nums[i];
            if(MaxSoFar<MaxEnding)
                MaxSoFar = MaxEnding;
            if(MaxEnding<0)
                MaxEnding=0;
        }
        return MaxSoFar;
    }
}
