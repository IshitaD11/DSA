/* 2130. Maximum Twin Sum of a Linked List

In a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.

For example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. These are the only nodes with twins for n = 4.
The twin sum is defined as the sum of a node and its twin.

Given the head of a linked list with even length, return the maximum twin sum of the linked list.

 

Example 1:


Input: head = [5,4,2,1]
Output: 6
Explanation:
Nodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.
There are no other nodes with twins in the linked list.
Thus, the maximum twin sum of the linked list is 6. 
Example 2:


Input: head = [4,2,2,3]
Output: 7
Explanation:
The nodes with twins present in this linked list are:
- Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.
- Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.
Thus, the maximum twin sum of the linked list is max(7, 4) = 7. 
Example 3:


Input: head = [1,100000]
Output: 100001
Explanation:
There is only one node with a twin in the linked list having twin sum of 1 + 100000 = 100001.
 

Constraints:

The number of nodes in the list is an even integer in the range [2, 105].
1 <= Node.val <= 105 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

 /* using two pointer, fast and slow, determine the middle of the linkedList
 increase slow by 1, fast by 2, where fast at null, slow will be at 1st node of 2nd half.
This is possible as mentioned linked List has even elements.

    1 -> 2 -> 3 -> 4 -> 5 -> 6 -> null ---> breaking position
                   s                f

Reverse 2nd half of the linked list, until next node = null starting from slow node
3 nodes pointer to reverse, 1 -> 2 -> 3
                           prev  s   NN
                  
    1 -> 2 -> 3 -> 4 <- 5 <- 6 <- null ---> breaking position
   head            v         prev slow
                  null ---> using this as breaking point for sum calculation
then iterate over two halfes in oppositive direction to find out the max sum  */

class Solution {
    public int pairSum(ListNode head) {

        ListNode slow = head;
        ListNode fast = head;

        // get the 1st position of 2nd half in slow
        while(fast!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }

        // reverse the 2nd half of linked List starting from slow to end
        ListNode nn = null; //next Node
        ListNode prev = null;

        while(slow!=null)
        {
            nn=slow.next;
            slow.next=prev;
            prev=slow;
            slow=nn;
        }

        // finally 2 pointer head and prev representing 2 halfs, do .next and get the sum
        ListNode first=head;
        ListNode last=prev;
        int sumMax=0;

        while(last!=null)
        {
            sumMax = Math.max((first.val + last.val),sumMax);
            first=first.next;
            last=last.next;
        }
        return sumMax;
    }
}
