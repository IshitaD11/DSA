/* 987. Vertical Order Traversal of a Binary Tree

Given the root of a binary tree, calculate the vertical order traversal of the binary tree.

For each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively. The root of the tree is at (0, 0).

The vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.

Return the vertical order traversal of the binary tree.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]
Explanation:
Column -1: Only node 9 is in this column.
Column 0: Nodes 3 and 15 are in this column in that order from top to bottom.
Column 1: Only node 20 is in this column.
Column 2: Only node 7 is in this column.
Example 2:


Input: root = [1,2,3,4,5,6,7]
Output: [[4],[2],[1,5,6],[3],[7]]
Explanation:
Column -2: Only node 4 is in this column.
Column -1: Only node 2 is in this column.
Column 0: Nodes 1, 5, and 6 are in this column.
          1 is at the top, so it comes first.
          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.
Column 1: Only node 3 is in this column.
Column 2: Only node 7 is in this column.
Example 3:


Input: root = [1,2,3,4,6,5,7]
Output: [[4],[2],[1,5,6],[3],[7]]
Explanation:
This case is the exact same as example 2, but with nodes 5 and 6 swapped.
Note that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
0 <= Node.val <= 1000 */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//  3 order of data we need to show, 1. column wise sort, 2. row wise sort, 3. data wise sort
// hashmap --> <col,hashMap<row,ArrayList of data of Tree>>
// queue --> Tuple(node,row,col) --> left position = currCol-1,currRow+1 
//                                   right position = currCol+1,currRow+1
// Sort each arrayList if size is more than 1
// TC:O(n), SC:O(n)

class Solution {
    public class Tuple{
        TreeNode node;
        int col;
        int row;
        Tuple(TreeNode nn,int c,int r)
        {
            node=nn;
            col=c;
            row=r;
        }
    }
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if(root==null)
            return ans;
        
        Queue<Tuple> que= new LinkedList<Tuple>();
        // HashMap<column,HashMap<row,data>>
        HashMap<Integer,HashMap<Integer,ArrayList<Integer>>> map = new HashMap<>();

        Tuple rootTuple = new Tuple(root,0,0);
        que.add(rootTuple);
        int minCol=0;
        int maxCol=0;
        int maxRow=0;
        while(que.size()>0)
        {
            Tuple curr=que.poll();
            minCol=Math.min(minCol,curr.col);
            maxCol=Math.max(maxCol,curr.col);
            maxRow=Math.max(maxRow,curr.row);

            // System.out.println(curr.node.val);

            // add data to hashMap
            //for new col, need to initialize inner hashMap
            if(!map.containsKey(curr.col)) 
            {
                HashMap<Integer,ArrayList<Integer>> rowMap = new HashMap<>();
                rowMap.put(curr.row,new ArrayList<Integer>());
                map.put(curr.col,rowMap);
            }
            // for new row, need to initialize arrayList
            else if(!map.get(curr.col).containsKey(curr.row))
            {
                map.get(curr.col).put(curr.row,new ArrayList<>());
            }
            map.get(curr.col).get(curr.row).add(curr.node.val);
            
            // add the left and right nodes to queue
            if(curr.node.left!=null)
                que.add(new Tuple(curr.node.left,curr.col-1,curr.row+1));
            if(curr.node.right!=null)
                que.add(new Tuple(curr.node.right,curr.col+1,curr.row+1));    
        }

        // iterate over the hashmap and generate the final ans
        for(int c=minCol;c<=maxCol;c++)
        {
            ArrayList<Integer> colList=new ArrayList<Integer>();
            for(int r=0;r<=maxRow;r++)
            {
                if(map.get(c).containsKey(r))
                {
                    // check if arrayList size is more than 1, then sort it
                    if(map.get(c).get(r).size()>1)
                    {
                        Collections.sort(map.get(c).get(r));
                    }
                    colList.addAll(map.get(c).get(r)); //add the sorted list to main list
                }
            }
            ans.add(colList);
        }
        return ans;
    }
}
