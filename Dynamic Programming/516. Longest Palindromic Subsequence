/* 516. Longest Palindromic Subsequence

Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: s = "bbbab"
Output: 4
Explanation: One possible longest palindromic subsequence is "bbbb".
Example 2:

Input: s = "cbbd"
Output: 2
Explanation: One possible longest palindromic subsequence is "bb".
 

Constraints:

1 <= s.length <= 1000
s consists only of lowercase English letters. */

class Solution {
    public int longestPalindromeSubseq(String s) {
        /*// find longest common subsequnce from s and reverse of s
        int len=s.length();
        StringBuilder sb = new StringBuilder(s);
        sb.reverse();
        String rev = sb.toString();
        int[][] dp = new int[len][len];
        for(int i=0;i<len;i++)
            Arrays.fill(dp[i],-1);
        int ans = longestCommonSubsequcne(s,rev,len-1,len-1,dp);
        return ans;
    }

    public int longestCommonSubsequcne(String s1,String s2,int idx1,int idx2,int[][] dp)
    {
        if(idx1<0 || idx2<0)
            return 0;
        
        if(dp[idx1][idx2]!=-1)
            return dp[idx1][idx2];
        int ans=0;
        if(s1.charAt(idx1)==s2.charAt(idx2))
            ans = longestCommonSubsequcne(s1,s2,idx1-1,idx2-1,dp)+1;
        else
        {
            int l1 = longestCommonSubsequcne(s1,s2,idx1,idx2-1,dp);
            int l2 = longestCommonSubsequcne(s1,s2,idx1-1,idx2,dp);
            ans = Math.max(l1,l2);
        }
        dp[idx1][idx2]=ans;
        return ans;
    }*/

    // TC:O(n*n) SC:O(n*n)
        int[][] dp = new int[s.length()][s.length()];
        for(int i=0;i<s.length();i++)
            Arrays.fill(dp[i],-1);
        int ans = longestCommonSubsequcne(s,s.length()-1,0,dp);
        return ans;
    }

    public int longestCommonSubsequcne(String s,int en,int st,int[][] dp)
    {
        if(st==en)
            return 1;

        if(st>en)
            return 0;
        
        if(dp[st][en]!=-1)
            return dp[st][en];
        dp[st][en]=0;
        if(s.charAt(st)==s.charAt(en))
        {
            dp[st][en] = longestCommonSubsequcne(s,en-1,st+1,dp)+2;
        }
        else
        {
            int l1 = longestCommonSubsequcne(s,en,st+1,dp);
            int l2 = longestCommonSubsequcne(s,en-1,st,dp);
            dp[st][en]=Math.max(l1,l2);
        }
        return dp[st][en];
    }
}
