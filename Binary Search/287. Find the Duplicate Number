/* 287. Find the Duplicate Number

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
 

Constraints:

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.
 

Follow up:

How can we prove that at least one duplicate number must exist in nums?
Can you solve the problem in linear runtime complexity? */

class Solution {
    public int findDuplicate(int[] nums) {
        // Binary Search TC:O(nlogn)
        /*int len=nums.length;
        // Binary search for 1 to len(nums)-1
        int st=1;
        int en=nums.length-1;
        int ans=0;
        while(st<=en)
        {
            int mid=st+(en-st)/2;
            if(greaterEle(mid,nums)>=(len-mid))
            {
                st=mid+1;
            }
            else
            {
                ans=mid;
                en=mid-1;
            }
        }
        return ans;
    }
    public int greaterEle(int mid,int[] nums)
    {
        int cnt=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]>mid)
                cnt++;
        }
        return cnt;*/

        // Floyd's Graph cycle detection
        int slow=0, fast=0;
        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
        }while(slow!=fast);
        slow=0;
        do{
            slow=nums[slow];
            fast=nums[fast];
        }while(slow!=fast);
        return slow;
    }
}
