/* 189. Rotate Array

Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
0 <= k <= 105
 

Follow up:

Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.
Could you do it in-place with O(1) extra space? */

/* [5,6,7,|1,2,3,4] After rotating the array 3 times to right  
   [1,2,3,4,5,6,7] > Main array. K=3
    0,1,2,3,4,5,6 --> indexex    
Observer in answer array, whole array at the right and left of | is switched places.
[1,2,3,4,5,6,7] --> main array
[7,6,5,|4,3,2,1] --> reversed once
[5,6,7,|1,2,3,4] --> reversed subarrays left and right of |, in thier own space --> this is the answer
*/

class Solution {
    public void rotate(int[] nums, int k) {
        int n=nums.length;
        if(k>n) //edge case: when k>n , take k in range of n
            k=k%n;
        reverse(nums,0,n-1); //step1: reverse whole array 0 to n-1
        reverse(nums,0,k-1); //step2: reverse left subarray 0 to k-1
        reverse(nums,k,n-1); //step3: reverse right subarray k to n-1
        
    }

    public void reverse(int[] nums, int start,int end)
    {
        // swap element of start and end to reverse the string
        while(start<end)
        {
            int tmp=nums[start];
            nums[start]=nums[end];
            nums[end]=tmp;
            start++;end--;
        }
    }
}
