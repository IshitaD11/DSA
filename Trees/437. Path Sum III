/* 437. Path Sum III

Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.

The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).

 

Example 1:


Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
Output: 3
Explanation: The paths that sum to 8 are shown.
Example 2:

Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: 3
 

Constraints:

The number of nodes in the tree is in the range [0, 1000].
-109 <= Node.val <= 109
-1000 <= targetSum <= 1000 */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    //TC:O(n^n) // consider all nodes as starting node and check for targetSum
    /*int count=0; 
    public int pathSum(TreeNode root, int targetSum) {
        if(root==null)
            return count;
        cntPathSum(root,(long)targetSum);
        if(root.left!=null)
            pathSum(root.left,targetSum);
        if(root.right!=null)
            pathSum(root.right,targetSum);
        return count;
    }
    public void cntPathSum(TreeNode root, long targetSum)
    {
        if(root==null)
            return;
        if(targetSum==(long)root.val)
            count++;
        
        long remSum=targetSum-(long)root.val;
        cntPathSum(root.left,remSum);
        cntPathSum(root.right,remSum);
        
    }*/

    // optimised: using hashMap, store the sum till now, check sum-targetSum exists in hashMap, if exists increase count. Using prefix sum and hashMap, we need to traverse the Tree only once, TC:O(n) SC:O(n)

    int cnt=0;
    public int pathSum(TreeNode root, int targetSum) {
        HashMap<Long,Integer> map = new HashMap<>();
        map.put(0L,1); //to handle case where the pfsum starts from root
        traverse(root,0L,map,(long)targetSum);
        return cnt;
    }

    public void traverse(TreeNode root,Long pfSum,HashMap<Long,Integer> map,long targetSum)
    {
        if(root==null)
            return;
        pfSum+=(long)root.val;

        cnt+=map.getOrDefault((pfSum-targetSum),0);

        map.put(pfSum,map.getOrDefault(pfSum,0)+1);

        traverse(root.left,pfSum,map,targetSum);
        traverse(root.right,pfSum,map,targetSum);
        
        // backtrack and reduce count
        map.put(pfSum,map.get(pfSum)-1);
    }

}
