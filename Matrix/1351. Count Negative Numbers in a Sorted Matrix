/* 1351. Count Negative Numbers in a Sorted Matrix

Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.

 

Example 1:

Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output: 8
Explanation: There are 8 negatives number in the matrix.
Example 2:

Input: grid = [[3,2],[1,0]]
Output: 0
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 100
-100 <= grid[i][j] <= 100
 

Follow up: Could you find an O(n + m) solution? */

/*As the Matrix is sorted we can use ladder technique which is O(n+m) 
Starting from top right corner, 
when element is negative(<0) then col-- to go to the position where it will become positive
when element is positive, right of this position all elements are negative, so count that => (m-1)-(col+1)+1 = m-col-1
Now if all elements are negative, col will get -1 and will come out of the loop. Remaining negative elements are m*(n-1-row+1) matrix = m*(n-row)
 */

class Solution {
    public int countNegatives(int[][] grid) {
        int cnt=0;
        int n=grid.length;
        int m=grid[0].length;

        int row=0;
        int col=m-1;
        while(row<n && col>=0)
        {
            if(grid[row][col]>=0)
            {
                cnt+=(m-col-1);
                row++;
            }
            else
            {
                col--;
            }
        }
        if(row<n && grid[row][0]<0)
        {
            cnt+= m * (n-row);
        }
        return cnt;
    }
}
